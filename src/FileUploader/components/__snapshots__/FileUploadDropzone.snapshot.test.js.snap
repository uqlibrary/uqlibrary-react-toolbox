// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component FileUploadDropzone should open files selection dialog 1`] = `
<Provider
  store={
    Object {
      "dispatch": [MockFunction],
      "getState": [MockFunction],
      "subscribe": [MockFunction],
    }
  }
>
  <FileUploadDropzone
    clearErrors={false}
    fileNameRestrictions={/\\^\\(\\?=\\^\\\\S\\*\\$\\)\\(\\?=\\^\\[\\^\\\\\\.\\]\\+\\\\\\.\\[\\^\\\\\\.\\]\\+\\$\\)\\(\\?=\\.\\{1,45\\}\\$\\)\\(\\?!\\(web_\\|preview_\\|thumbnail_\\|stream_\\|fezacml_\\|presmd_\\)\\)\\[a-z\\]\\[a-z\\\\d\\\\-_\\\\\\.\\]\\+/}
    locale={
      Object {
        "errorTitle": "Upload Errors",
        "fileUploadInstruction": "Test instructions",
        "fileUploadRestrictionHeading": "Test header",
        "fileUploadRestrictions": "Test text",
        "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
        "successTitle": "Success",
        "validation": Object {
          "fileName": "File(s) ([filenames]) have invalid file name",
          "folder": "Invalid files ([filenames])",
          "maxFileSize": "File(s) ([filenames]) exceed maximum allowed upload file size",
          "maxFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([filenames]) will not be uploaded",
        },
      }
    }
    maxFiles={5}
    maxSize={1000}
    onDropped={[MockFunction]}
    uploadedFiles={Array []}
  >
    <div>
      <div
        className="columns"
      >
        <div
          className="column"
          onKeyPress={[Function]}
          tabIndex="0"
        >
          <t
            disableClick={false}
            disablePreview={true}
            disabled={false}
            maxSize={1000}
            minSize={0}
            multiple={true}
            onDrop={[Function]}
            preventDropOnDocument={true}
            style={
              Object {
                "padding": "0px",
              }
            }
          >
            <div
              aria-disabled={false}
              className=""
              onClick={[Function]}
              onDragEnter={[Function]}
              onDragLeave={[Function]}
              onDragOver={[Function]}
              onDragStart={[Function]}
              onDrop={[Function]}
              style={
                Object {
                  "padding": "0px",
                }
              }
            >
              <FileUploadDropzoneStaticContent
                txt={
                  Object {
                    "errorTitle": "Upload Errors",
                    "fileUploadInstruction": "Test instructions",
                    "fileUploadRestrictionHeading": "Test header",
                    "fileUploadRestrictions": "Test text",
                    "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
                    "successTitle": "Success",
                    "validation": Object {
                      "fileName": "File(s) ([filenames]) have invalid file name",
                      "folder": "Invalid files ([filenames])",
                      "maxFileSize": "File(s) ([filenames]) exceed maximum allowed upload file size",
                      "maxFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([filenames]) will not be uploaded",
                    },
                  }
                }
              >
                <div
                  className="columns file-instructions"
                >
                  <div
                    className="column"
                  >
                    Test header
                    Test text
                  </div>
                  <div
                    className="column upload-instructions"
                  >
                    <FontIcon
                      className="material-icons"
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                    >
                      <span
                        className="material-icons"
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        style={
                          Object {
                            "color": "rgba(0, 0, 0, 0.87)",
                            "display": "inline-block",
                            "fontSize": 24,
                            "muiPrepared": true,
                            "position": "relative",
                            "transition": "all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms",
                            "userSelect": "none",
                          }
                        }
                      >
                        cloud_upload
                      </span>
                    </FontIcon>
                    Test instructions
                  </div>
                </div>
              </FileUploadDropzoneStaticContent>
              <input
                autoComplete="off"
                disabled={false}
                multiple={true}
                onChange={[Function]}
                style={
                  Object {
                    "display": "none",
                  }
                }
                type="file"
              />
            </div>
          </t>
        </div>
      </div>
    </div>
  </FileUploadDropzone>
</Provider>
`;

exports[`Component FileUploadDropzone should render correctly without any setup 1`] = `
<div>
  <div
    className="columns"
  >
    <div
      className="column"
      onKeyPress={[Function]}
      tabIndex="0"
    >
      <t
        disableClick={false}
        disablePreview={true}
        disabled={false}
        maxSize={1000}
        minSize={0}
        multiple={true}
        onDrop={[Function]}
        preventDropOnDocument={true}
        style={
          Object {
            "padding": "0px",
          }
        }
      >
        <FileUploadDropzoneStaticContent
          txt={
            Object {
              "errorTitle": "Upload Errors",
              "fileUploadInstruction": "Test instructions",
              "fileUploadRestrictionHeading": "Test header",
              "fileUploadRestrictions": "Test text",
              "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
              "successTitle": "Success",
              "validation": Object {
                "fileName": "File(s) ([filenames]) have invalid file name",
                "folder": "Invalid files ([filenames])",
                "maxFileSize": "File(s) ([filenames]) exceed maximum allowed upload file size",
                "maxFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([filenames]) will not be uploaded",
              },
            }
          }
        />
      </t>
    </div>
  </div>
</div>
`;

exports[`Component FileUploadDropzone should render files discarding folders 1`] = `
<div>
  <div
    className="columns"
  >
    <div
      className="column"
      onKeyPress={[Function]}
      tabIndex="0"
    >
      <t
        disableClick={false}
        disablePreview={true}
        disabled={false}
        maxSize={1000}
        minSize={0}
        multiple={true}
        onDrop={[Function]}
        preventDropOnDocument={true}
        style={
          Object {
            "padding": "0px",
          }
        }
      >
        <FileUploadDropzoneStaticContent
          txt={
            Object {
              "errorTitle": "Upload Errors",
              "fileUploadInstruction": "Test instructions",
              "fileUploadRestrictionHeading": "Test header",
              "fileUploadRestrictions": "Test text",
              "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
              "successTitle": "Success",
              "validation": Object {
                "fileName": "File(s) ([filenames]) have invalid file name",
                "folder": "Invalid files ([filenames])",
                "maxFileSize": "File(s) ([filenames]) exceed maximum allowed upload file size",
                "maxFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([filenames]) will not be uploaded",
              },
            }
          }
        />
      </t>
    </div>
  </div>
</div>
`;

exports[`Component FileUploadDropzone should render files discarding folders 2`] = `
<div>
  <div
    className="columns"
  >
    <div
      className="column"
      onKeyPress={[Function]}
      tabIndex="0"
    >
      <t
        disableClick={false}
        disablePreview={true}
        disabled={false}
        maxSize={1000}
        minSize={0}
        multiple={true}
        onDrop={[Function]}
        preventDropOnDocument={true}
        style={
          Object {
            "padding": "0px",
          }
        }
      >
        <FileUploadDropzoneStaticContent
          txt={
            Object {
              "errorTitle": "Upload Errors",
              "fileUploadInstruction": "Test instructions",
              "fileUploadRestrictionHeading": "Test header",
              "fileUploadRestrictions": "Test text",
              "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
              "successTitle": "Success",
              "validation": Object {
                "fileName": "File(s) ([filenames]) have invalid file name",
                "folder": "Invalid files ([filenames])",
                "maxFileSize": "File(s) ([filenames]) exceed maximum allowed upload file size",
                "maxFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([filenames]) will not be uploaded",
              },
            }
          }
        />
      </t>
    </div>
  </div>
  <Alert
    allowDismiss={false}
    message="Successfully added 2 file(s) to upload queue."
    title="Success"
    type="done"
  />
  <Alert
    allowDismiss={false}
    message="Invalid files (test); File(s) (a.text.txt, web_a.txt, WEB_b.txt, Web_c.txt) have invalid file name"
    title="Upload Errors"
    type="error"
  />
</div>
`;
